// variable
variable = string
  `$this = $arg` string string

variable = integer
  `$this = $arg` integer integer

variable = float
  `$this = $arg` float float

variable = *
  `$this = $arg` * *

undefined else
  `if (!condBool) {$block}`

undefined return *
  `return $arg`

undefined print
  "undefined" print

// string
string print
  `printf("%s\n", $this)` integer

string = string
  `$this = $arg` string

string += string
  `$this = sdscatsds($this, $arg)` string

string += integer
  `$this = sdscatsds($this, sdsfromlonglong((long long)$arg))` string

string + string
  `sdscatsds($this, $arg)` string

string + integer
  `sdscatsds($this, sdsfromlonglong((long long)$arg))` string

string + float
  `sdscatsds($this, _strFromFloat($arg))` string

string getType
  `"string"` string

string == string
  `(strcmp($this, $arg) == 0)` bool
  block
    `condBool = (strcmp($this, $arg) == 0); if (condBool) {$block}` bool

string != string
  `(strcmp($this, $arg) != 0)` bool
  block
    `condBool = (strcmp($this, $arg) != 0); if (condBool) {$block}` bool

string tok string
  `_strTok($this, $arg)` array:string

string trim string
  `sdstrim($this, $arg)`

string each variable
  `for (int i = 0; i < sdslen($this); i++){$arg = sdsnewlen(&$this[i], 1); $block}` undefined string

string getLeftShift
  `_strLeftShift($this, ' ')` integer

// integer
integer print
  `printf("%d\n", $this)` integer

integer = integer
  `$this = $arg` integer

integer += integer
  `$this += $arg` integer

integer -= integer
  `$this -= $arg` integer

integer *= integer
  `$this *= $arg` integer

integer > integer
  `($this > $arg)` bool
  block
    `condBool = ($this > $arg); if (condBool) {$block}` bool

integer < integer
  `($this < $arg)` bool
  block
    `condBool = ($this < $arg); if (condBool) {$block}` bool

integer == integer
  `($this == $arg)` bool
  block
    `condBool = ($this == $arg); if (condBool) {$block}` bool

integer != integer
  `($this != $arg)` bool
  block
    `condBool = ($this != $arg); if (condBool) {$block}` bool

integer >: integer
  `while ($this > $arg) {$block}` bool

integer <: integer
  `while ($this < $arg) {$block}` bool

integer > float
  `if ((float) $this > $arg) {$block}` bool

integer < float
  `if ((float) $this > $arg) {$block}` bool

integer >: float
  `while ((float) $this > $arg) {$block}` bool

integer <: float
  `while ((float) $this < $arg) {$block}` bool

integer + string
  `sdscatsds(sdsfromlonglong((long long)$this), $arg)` string

integer + integer
  `($this + $arg)` integer

integer ++
  `$this += 1` integer

integer --
  `$this -= 1` integer

integer + float
  `((float) $this + $arg)` float

integer - integer
  `($this - $arg)` integer

integer - float
  `((float) $this - $arg)` float

integer * integer
  `($this * $arg)` integer

integer / integer
  `((float) $this / (float) $arg)` float

integer / float
  `((float) $this / $arg)` float

integer ^ integer
  `($this ^ $arg)` integer

integer & integer
  `($this & $arg)` integer

integer | integer
  `($this | $arg)` integer

integer >> integer
  `($this >> $arg)` integer

integer << integer
  `($this << $arg)` integer

integer pow integer
  `(int)pow($this, $arg)` integer

integer pow float
  `(float)pow($this, $arg)` float

integer getType
  `"integer"` string

integer % integer
  `($this % $arg)` integer

// float
float print
  `printf("%g\n", $this)` integer

float = float
  `$this = $arg` float

float += float
  `$this += $arg` float

float -= float
  `$this -= $arg` float

float *= float
  `$this *= $arg` float

float /= float
  `$this /= $arg` float

float /= integer
  `$this /= (float) $arg` float

float + float
  `($this + $arg)` float

float + integer
  `($this + (float) $arg)` float

float - float
  `($this - $arg)` float

float - integer
  `($this - (float) $arg)` float

float + string
  `sdscatsds(_strFromFloat($this), $arg)` string

float * integer
  `($this * (float) $arg)` float

float * float
  `($this * $arg)` float

float / float
  `($this / (float)$arg)` float

float / integer
  `($this / $arg)` float

float pow integer
  `(float)pow($this, $arg)` float

float pow float
  `(float)pow($this, $arg)` float

float getType
  `"float"` string

// bool
bool && bool
  `($this && $arg)` bool
  block
    `condBool = ($this && $arg); if (condBool) {$block}` bool

bool || bool
  `($this || $arg)` bool
  block
    `condBool = ($this || $arg); if (condBool) {$block}` bool

bool ? tuple
  `$ternarOp(&$this, *$arg)`


// tuples
* , *
  `$this, $arg` tuple

tuple print
  `$structPrint(&$this)` integer

struct print
  `$structPrint(&$this)` integer

tuple = tuple
  `$structEq($thisLinked, &*$arg)` tuple

tuple = struct
  `$structEq($thisLinked, $arg)` tuple

tuple == tuple
  `$structEqCheck(&$this, &$arg)` bool
  block
    `condBool = $structEqCheck(&$this, &$arg); if (condBool) {$block}` bool

tuple != tuple
  `$structNotEqCheck(&$this, &$arg)` bool
  block
    `condBool = $structNotEqCheck(&$this, &$arg); if (condBool) {$block}` bool

tuple > tuple
  `$structMoreCheck(&$this, &$arg)` bool
  block
    `condBool = $structMoreCheck(&$this, &$arg); if (condBool) {$block}` bool

tuple >= tuple
  `$structMoreEqCheck(&$this, &$arg)` bool
  block
    `condBool = $structMoreEqCheck(&$this, &$arg); if (condBool) {$block}` bool

tuple < tuple
  `$structLessCheck(&$this, &$arg)` bool
  block
    `condBool = $structLessCheck(&$this, &$arg); if (condBool) {$block}` bool

tuple <= tuple
  `$structLessEqCheck(&$this, &$arg)` bool
  block
    `condBool = $structLessEqCheck(&$this, &$arg); if (condBool) {$block}` bool

tuple array
  `$structToArray(*$this)`


variable [] type
  `$this = $arrayInit()` array:$type array

array push *
  `kv_push(int, $this, $arg)`

array each variable
  `{$thisType x = $this; int kvs = kv_size(x); for(int i = 0; i < kvs; i++) {$arg = kv_a($thisSubType, x, i); $block}}` undefined $thisSubType

array print
  out = ""
  this each item
    out == ""
      out += item
    else
      out += ", " + item
  out print

undefined array
  `$arrayInit()` array

tuple getType
  `"tuple"` string

// structs

variable = tuple
  `$this = (typeof($this)){$arg}` struct struct

variable = struct
  `$this = (typeof($this)){$arg}` struct struct

struct . *
  `$this.$argName` *

variable . *
  `$this.$argName` *

struct getType
  `"struct"` string

// superstructs
* : *
  `.$thisName = $arg` struct

// array_integer

variable = array
  `$this = $arg` array:$argSubType array

array push thisSubType
  `kv_push($thisSubType, $this, $arg)`

array pop
  `kv_pop($this)` $thisSubType

// files
string readFileSync
  `_strFromFile($this)` string